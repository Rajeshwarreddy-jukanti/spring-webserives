Git Commaon commands :

	Git 					:task							:Notes	Git commands

Tell Git who you are	Configure the author name and email address to be used with your commits.     	git config --global user.name "Sam Smith"
			Note that Git strips some characters (for example trailing periods)
			from user.name.									git config --global user.email sam@example.com

Create a new local 
repository												git init

Check out a repository	Create a working copy of a local repository:					git clone /path/to/repository
 			For a remote server, use:							git clone username@host:/path/to/repository

	
	

Add files		Add one or more files to staging (index):					git add <filename>
																git add *

Commit			Commit changes to head (but not yet to the remote repository):			git commit -m "Commit message"
			Commit any files you've added with git add, and also commit any			git commit -a
			files you've changed since then:
	

Push			Send changes to the master branch of your remote repository:			git push origin master

Status			List the files you've changed and those you still need to add or commit:	git status


Connect to a remote 
repository		If you haven't connected your local repository to a remote server, add the 	git remote add origin <server>
			server to be able to push to it:
			List all currently configured remote repositories:				git remote -v


Branches		Create a new branch and switch to it:						git checkout -b <branchname>
			Switch from one branch to another:						git checkout <branchname>
			List all the branches in your repo, and also tell you what branch 
you're currently in:											git branch
			Delete the feature branch:							git branch -d <branchname>

			Push the branch to your remote repository, so others can use it:		git push origin <branchname> 												Push all branches to your remote repository:					git push --all origin
			Delete a branch on your remote repository:					git push origin :<branchname>


Update from the remote 
repository		Fetch and merge changes on the remote server to your working directory:		git pull

			To merge a different branch into your active branch:				git merge <branchname>
					
			View all the merge conflicts:							git diff							
			View the conflicts against the base file:					git diff --base <filename>
	
					
			Preview changes, before merging:						git diff <sourcebranch> <targetbranch>
					
			After you have manually resolved any conflicts, 				git add <filename>													you mark the changed file:	


Tags			You can use tagging to mark a significant changeset, such as a release:		git tag 1.0.0 <commitID>
					
			CommitId is the leading characters of the changeset ID, up to 10, 
			but must be unique. 								git log  
			Get the ID using:

			Push all tags to remote repository:						git push --tags origin


Undo local changes 	If you mess up, you can replace the changes in your working tree with   	git checkout -- <filename>
			the last content in head:
			Changes already added to the index, as well as new files, will be kept.



			Instead, to drop all your local changes and commits, fetch the latest history 	git fetch origin
			from the server and point your local master branch at it, do this:		git reset --hard origin/master



Search			Search the working directory for foo():						git grep "foo()"




---------------------------------------------------------------------------------------------------------------------------
					GIT COMMANDS PRACTICES
---------------------------------------------------------------------------------------------------------------------------






--amend:- command for last comment change

reset Head file_name :- for last added file(Changes are not revert back to the file) to staging but not committed, So we don't want in the staging area & we revert back to working dir with last one

Checkout -- file_name :- for file changes in inside are revert back but not added to staging area, So we revert back with last one changes(untracked file are removed)

git checkout -b branch_name or git checkout branch_name :- Create branch and switch to branch
git branch : list of all branches shows
git push github branch_name : create a branch in remote repo

fetch & pull & clone :
Git fetch origin_name:just download the code from remote
git pull branch_name : download and then merge that remote branch into your current branch
git clone url_name :setup your local master brach to track the remote branch(default branch)

Tags: : It is ability to tag specific points in history as being impartant
It use this finctionality to mark release mark(making an version of project)
1)Annotated tags
2)lieightweight tag

create annotated tags:
git tag -a v1.0
create lightwieght tag :
git tag v1.2-lw
show list of tags

annotated tag created for previous commit
Command :git tag v1.4 commit_hashcode

git push origin_name tag_name : git does not push tags to remote servers so we will have to push explicitly by using this command 






















